/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   path_resolution.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ewiese-m <ewiese-m@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/25 16:30:36 by ewiese-m          #+#    #+#             */
/*   Updated: 2025/03/31 14:30:18 by ewiese-m         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

char	*check_path_for_executable(char *path, char *cmd)
{
	char	*temp;
	char	*full_path;

	temp = ft_strjoin(path, "/");
	if (!temp)
		return (NULL);
	full_path = ft_strjoin(temp, cmd);
	free(temp);
	if (!full_path)
		return (NULL);
	if (is_executable(full_path))
		return (full_path);
	free(full_path);
	return (NULL);
}

char	*search_in_path(char *cmd, char **envp)
{
	char	**paths;
	char	*path;
	int		i;

	paths = get_paths(envp);
	if (!paths)
		return (NULL);
	i = 0;
	while (paths[i])
	{
		path = check_path_for_executable(paths[i], cmd);
		if (path)
		{
			free_path_array(paths);
			return (path);
		}
		i++;
	}
	free_path_array(paths);
	return (NULL);
}

char	*ft_mkpathcommand(char *path, char *command)
{
	char	*temp;
	char	*full_path;

	if (!path || !command)
		return (NULL);

	temp = ft_strjoin(path, "/");
	if (!temp)
		return (NULL);

	full_path = ft_strjoin(temp, command);
	free(temp);

	return (full_path);
}


char	*find_executable(char *cmd, char **envp)
{
	char	*path;
	char	**paths;
	int		i;
	char	*full_path;

	fprintf(stderr, "DEBUG: find_executable: Looking for command '%s'\n", cmd ? cmd : "NULL");

	if (!cmd || !envp)
	{
		fprintf(stderr, "DEBUG: find_executable: Invalid input (NULL)\n");
		return (NULL);
	}

	if (cmd[0] == '/' || cmd[0] == '.')
	{
		fprintf(stderr, "DEBUG: find_executable: Command has path, returning as is\n");
		return (ft_strdup(cmd));
	}

	path = NULL;
	i = 0;
	while (envp[i])
	{
		if (ft_strncmp(envp[i], "PATH=", 5) == 0)
		{
			path = envp[i] + 5;
			break;
		}
		i++;
	}

	if (!path)
	{
		fprintf(stderr, "DEBUG: find_executable: PATH not found in environment\n");
		return (NULL);
	}

	fprintf(stderr, "DEBUG: find_executable: PATH=%s\n", path);
	paths = ft_split(path, ':');
	if (!paths)
	{
		fprintf(stderr, "DEBUG: find_executable: Failed to split PATH\n");
		return (NULL);
	}

	i = 0;
	while (paths[i])
	{
		full_path = ft_mkpathcommand(paths[i], cmd);
		fprintf(stderr, "DEBUG: find_executable: Trying path: %s\n", full_path);

		if (access(full_path, X_OK) == 0)
		{
			fprintf(stderr, "DEBUG: find_executable: Found executable at %s\n", full_path);
			ft_free_dstr(paths);
			return (full_path);
		}

		free(full_path);
		i++;
	}

	fprintf(stderr, "DEBUG: find_executable: Command not found in any PATH directory\n");
	ft_free_dstr(paths);
	return (NULL);
}
